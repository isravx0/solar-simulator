import React, { useState } from 'react';
import ChatBot from 'react-chatbotify';

// Sample FAQ data (for example, for Solar Panels, Battery, and Simulator)
const faqData = {
    "battery": {
        "how it works": "The battery stores energy generated by the solar panels and can be used when needed.",
        "maintenance": "To maintain the battery, ensure that it is kept clean and check its charge regularly."
    },
    "solar panel": {
        "energy generation": "Solar panels generate energy by converting sunlight into electricity through photovoltaic cells.",
        "optimization tips": "To optimize solar panel efficiency, ensure they are cleaned regularly and positioned in direct sunlight."
    },
    "simulator": {
        "energy estimation": "The simulator estimates the energy based on your location, panel size, and other environmental factors.",
        "result interpretation": "Results from the simulator can be interpreted by checking energy output, estimated savings, and efficiency."
    }
};

const MyChatBot = () => {
    const [clientInfo, setClientInfo] = useState({});
    const [emailValidated, setEmailValidated] = useState(false);

    // Email validation regex
    const validateEmail = (email) => {
        const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return regex.test(email);
    };

    const flow = {
        start: {
            message: "Hello! How can I assist you today? Please choose a topic:",
            options: ["Battery", "Solar Panel", "Simulator", "Other", "Yes, contact support"],
            path: (params) => {
                const userChoice = params.userInput.toLowerCase();
                if (userChoice === "battery") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "battery" }));
                    return "battery_question";
                }
                if (userChoice === "solar panel") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "solar panel" }));
                    return "solar_question";
                }
                if (userChoice === "simulator") {
                    setClientInfo(prevInfo => ({ ...prevInfo, topic: "simulator" }));
                    return "simulator_question";
                }
                if (userChoice === "yes, contact support") {
                    return "get_email"; // Proceed to email collection if user wants support
                }
                return "other_question";
            }
        },
        battery_question: {
            message: "Would you like to know how the battery works or how to maintain it?",
            options: ["How it works", "Maintenance"],
            path: "provide_faq_answer"
        },
        solar_question: {
            message: "Do you want to know how solar panels generate energy or how to optimize them?",
            options: ["Energy generation", "Optimization tips"],
            path: "provide_faq_answer"
        },
        simulator_question: {
            message: "Would you like to know how the simulator estimates energy or how to interpret the results?",
            options: ["Energy estimation", "Result interpretation"],
            path: "provide_faq_answer"
        },
        other_question: {
            message: "Please briefly describe your question, and I'll try to help!",
            path: "need_more_help"
        },
        provide_faq_answer: {
            message: (params) => {
                const { topic } = clientInfo;
                const userChoice = params.userInput.toLowerCase();

                if (faqData[topic][userChoice]) {
                    return faqData[topic][userChoice];
                }
                return "I'm sorry, I don't have an answer to that question right now.";
            },
            path: "need_more_help"
        },
        need_more_help: {
            message: "Is there anything else I can help you with?",
            options: ["Yes, visit dashboard", "Yes, contact support", "No, I'm good"],
            path: (params) => {
                const userChoice = params.userInput.toLowerCase();
                if (userChoice === "yes, visit dashboard") {
                    return "visit_dashboard";
                }
                if (userChoice === "yes, contact support") {
                    return "get_email"; // Ask for email again if user chooses to contact support
                }
                return "thank_user";
            }
        },
        visit_dashboard: {
            message: "Would you like to visit the dashboard pages for Battery, Solar Panel, or Simulator?",
            options: ["Battery Dashboard", "Solar Panel Dashboard", "Simulator Dashboard", "None"],
            path: (params) => {
                const userChoice = params.userInput.toLowerCase();
                if (userChoice === "battery dashboard") {
                    window.location.href = "/battery-dashboard"; // Redirect to the battery dashboard
                    return "Redirecting to the battery dashboard...";
                }
                if (userChoice === "solar panel dashboard") {
                    window.location.href = "/solar-panel-dashboard"; // Redirect to the solar panel dashboard
                    return "Redirecting to the solar panel dashboard...";
                }
                if (userChoice === "simulator dashboard") {
                    window.location.href = "/simulator-dashboard"; // Redirect to the simulator dashboard
                    return "Redirecting to the simulator dashboard...";
                }
                return "Sorry, I didn't understand that. Please choose a valid dashboard.";
            }
        },
        get_email: {
            message: "To contact support, please provide your email address so we can get in touch with you:",
            path: "validate_email"
        },
        validate_email: {
            message: async (params) => {
                const email = params.userInput;
                if (!email || !validateEmail(email)) {
                    return "Please provide a valid email address."; // Prompt again if email is invalid
                }

                // Save the email to clientInfo
                setClientInfo(prevInfo => ({ ...prevInfo, email }));
                setEmailValidated(true);  // Mark email as validated

                // Ask for the question they need help with
                return "Thanks for providing your email! Please explain your question in detail.";
            },
            path: "send_email"
        },
        send_email: {
            message: async (params) => {
                const { name, email } = clientInfo;
                const userQuestion = params.userInput; // The user's question
                
                // Prepare the email data to send
                const emailData = {
                    name: name || "Anonymous",
                    email: email,
                    question: userQuestion
                };
                
                try {
                    console.log('Sending email with data:', emailData); // Debugging log
        
                    const response = await fetch('http://localhost:5000/api/send-email', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(emailData)
                    });
        
                    if (!response.ok) {
                        throw new Error('Failed to send email');
                    }
        
                    const result = await response.json();
                    console.log("Email sent successfully:", result);
        
                    return `Thank you, ${name || "customer"}! Your message has been sent to our support team. We'll contact you soon.`;
                } catch (error) {
                    console.error("Error sending email:", error);
                    return "Sorry, there was an issue sending your message. Please try again later.";
                }
            },
            path: "thank_user"
        },
        thank_user: {
            message: "Thank you for reaching out! Have a great day!",
            path: null // End the conversation
        },
        end: {
            message: "Thank you for visiting. Feel free to come back if you have more questions!",
            path: null // End the conversation
        }
    };

    return (
        <div className="chatbot-container">
            <ChatBot 
                settings={{
                    general: { embedded: true }, 
                    chatHistory: { storageKey: "solar_assistant" },
                }} 
                flow={flow}
            />
        </div>
    );
};

export default MyChatBot;
